#!/usr/bin/env python3

import random
import logging
import gevent.server

log = logging.getLogger('simulator')

class PSSimulator(gevent.server.StreamServer):

    class Error(Exception):
        pass

    def __init__(self, *args, **kwargs):
        super().__init__(*args, **kwargs)
        self.voltage = 0.01

    def handle(self, sock, addr):
        log.info('new connection from %r', addr)
        while True:
            request = sock.recv(1024)
            if not request:
                break
            log.info('request %r', request)
            try:
                reply = self.handle_request(request)
            except PSSimulator.Error:
                reply = b'ERROR'
            gevent.sleep(1e-1)
            log.info('reply %r', reply)
            sock.sendall(reply + b'\n')
        log.info('disconnected %r', addr)

    def handle_request(self, request):
        if request.lower() == b'vol?\n':
            v = random.random() - 0.5 + self.voltage
            return bytes(str(v), 'ascii')
        raise self.Error('invalid command')


def main(port=45000):
    address = '', port
    server = PSSimulator(address)
    try:
        log.info('simulator listenning on %r!', address)
        server.serve_forever()
    except KeyboardInterrupt:
        print('Ctrl-C pressed. Bailing out!')


if __name__ == '__main__':
    import sys
    logging.basicConfig(level=logging.INFO)
    if len(sys.argv) > 1:
        main(port=int(sys.argv[1]))
    else:
        main()
